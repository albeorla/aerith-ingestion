#!/usr/bin/env poetry run python

import logging
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List

from dotenv import load_dotenv
from langchain.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()

# Setup logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('.git/hooks/prepare-commit-msg.log'),
        logging.StreamHandler()
    ]
)

def get_staged_diff():
    """Get the staged diff from git."""
    try:
        result = subprocess.run(
            ["git", "diff", "--cached"],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout
    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to get diff: {e}")
        return ""

def determine_commit_type(files: List[str], diff: str) -> str:
    """Determine commit type based on conventional commits."""
    if any("test" in f for f in files):
        return "test"
    if any(f.startswith("docs/") or "README" in f for f in files):
        return "docs"
    if any(".py" in f for f in files):
        if "+class" in diff:
            return "feat"
        if "def test_" in diff:
            return "test"
        if "fix" in diff.lower() or "bug" in diff.lower():
            return "fix"
        if any(f.startswith("refactor/") for f in files):
            return "refactor"
    if any(any(name in f for name in ["Makefile", "pyproject.toml", "requirements.txt"]) for f in files):
        return "build"
    if any(".github" in f or "CI" in f or "cd" in f for f in files):
        return "ci"
    return "chore"

def get_scope(files: List[str]) -> str:
    """Determine scope from changed files."""
    if not files:
        return ""
    
    # Get all parent directories
    dirs = [Path(f).parent for f in files]
    # Filter out root directory
    dirs = [str(d) for d in dirs if str(d) != "."]
    if not dirs:
        return ""
    
    # Get most common directory
    return max(set(dirs), key=dirs.count).split("/")[0]

def get_ai_description(diff: str, files: List[str]) -> str:
    """Generate commit description using OpenAI."""
    try:
        llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            temperature=0.7,
        )
        
        template = """You are a helpful git commit message writer. Given the following git diff and changed files, 
        write a concise but informative commit message description (max 50 chars).
        Focus on the "what" and "why" of the changes.
        DO NOT include any type prefixes (like 'feat:', 'fix:', etc.) or scopes.
        Just write a clear, direct description of the changes.

        Changed files:
        {files}

        Git diff:
        {diff}

        Example good responses:
        - add install-hooks target for git hooks
        - implement OpenAI commit message generation
        - fix path handling in config loader
        
        Example bad responses:
        - feat: add hooks (don't include type)
        - fix(core): update config (don't include type or scope)
        - chore: update dependencies (don't include type)

        Write ONLY the description, no type prefix or scope. Keep it under 50 chars."""
        
        prompt = ChatPromptTemplate.from_template(template)
        chain = prompt | llm
        
        response = chain.invoke({
            "diff": diff,
            "files": "\n".join(files)
        })
        
        # Remove any type prefixes if they sneak through
        description = response.content.strip()
        for prefix in ["feat:", "fix:", "docs:", "test:", "chore:", "refactor:", "build:", "ci:"]:
            if description.lower().startswith(prefix):
                description = description[len(prefix):].strip()
        
        return description
    except Exception as e:
        logging.error(f"Failed to generate AI description: {e}")
        return "update files"

def generate_commit_message(diff: str) -> str:
    """Generate a conventional commit message."""
    # Extract changed files
    file_changes = [line for line in diff.split('\n') if line.startswith('diff --git')]
    files = [f.split()[-1][2:] for f in file_changes]  # Remove 'b/' prefix
    
    # Build commit parts
    commit_type = determine_commit_type(files, diff)
    scope = get_scope(files)
    description = get_ai_description(diff, files)
    
    # Format the message
    msg = f"{commit_type}"
    if scope:
        msg += f"({scope})"
    msg += f": {description}\n\n"
    
    # Add changed files to body
    if files:
        msg += "Changed files:\n"
        for file in files:
            msg += f"- {file}\n"
    
    return msg

def main():
    try:
        print("Hook starting...")
        if len(sys.argv) < 2:
            print("No commit message file provided!")
            return
            
        commit_msg_file = sys.argv[1]
        print(f"Commit message file: {commit_msg_file}")
        
        diff = get_staged_diff()
        print(f"Got diff of length: {len(diff)}")
        
        if not diff:
            print("No diff found, exiting")
            return
            
        msg = generate_commit_message(diff)
        print(f"Generated message:\n{msg}")
        
        # Read existing message
        with open(commit_msg_file, 'r') as f:
            existing_msg = f.read()
        print(f"Existing message: {existing_msg}")
        
        # Always write the message for testing
        print(f"Writing to {commit_msg_file}")
        with open(commit_msg_file, 'w') as f:
            f.write(msg)
        print("Message written successfully")
        
        # Verify the write
        with open(commit_msg_file, 'r') as f:
            final_msg = f.read()
        print(f"Final message in file:\n{final_msg}")
            
    except Exception as e:
        print(f"Error in main: {e}")
        logging.error(f"Hook failed: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main() 