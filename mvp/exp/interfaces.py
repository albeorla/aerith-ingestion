from typing import Any, Dict, List, Optional, Protocol


class LoggerProtocol(Protocol):
    """Protocol for logger objects."""

    def info(self, msg: str) -> None: ...
    def debug(self, msg: str) -> None: ...
    def warning(self, msg: str) -> None: ...
    def error(self, msg: str) -> None: ...


class EnvironmentConfigProtocol(Protocol):
    """Protocol for environment configuration."""

    def get_logger(self) -> LoggerProtocol: ...
    def get_todoist_api_token(self) -> str: ...
    def get_google_api_key(self) -> str: ...
    def get_gemini_model_name(self) -> str: ...
    def get_gemini_generation_config(self) -> Dict[str, Any]: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_dataframe(self, vertical: bool = False) -> Any: ...
    def get_config_as_str(self, vertical: bool = True, spacing: int = 30) -> str: ...


class TodoistServiceProtocol(Protocol):
    """Protocol for Todoist service."""

    def fetch_projects(self) -> Optional[List[Dict[str, Any]]]: ...
    def fetch_tasks_for_project(
        self, project_id: str
    ) -> Optional[List[Dict[str, Any]]]: ...
    def fetch_all_tasks(
        self, projects: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]: ...


class GTDProcessorProtocol(Protocol):
    """Protocol for GTD processor."""

    def categorize_gtd_level(self, task: Any) -> Any: ...
    def prioritize_tasks(self, tasks: List[Any]) -> List[Any]: ...
    def organize_by_timeframe(
        self, tasks_by_gtd_level: Dict[str, List[Any]]
    ) -> Dict[str, Dict[str, List[Any]]]: ...


class DataStorageProtocol(Protocol):
    """Protocol for data storage."""

    def save_json(self, data: Any, path: str) -> bool: ...
    def load_json(self, path: str) -> Any: ...
    def save_jsonl(self, data_list: List[Any], path: str) -> bool: ...
    def load_jsonl(self, path: str) -> List[Any]: ...


class GeminiServiceProtocol(Protocol):
    """Protocol for Gemini service."""

    def generate_text(self, prompt: str, **generation_params) -> Optional[str]: ...
    def generate_function_call(
        self, contents: str, function_name: str, parameters: dict
    ) -> Optional[Dict[str, Any]]: ...
    def categorize_task(
        self, task_content: str, gtd_definitions: str
    ) -> Optional[Dict[str, Any]]: ...
    def extract_gtd_level(self, gemini_response: Dict[str, Any]) -> Optional[str]: ...
    def send_prompt(
        self, prompt: str, max_retries: int = 5, initial_delay: int = 1
    ) -> Optional[Dict[str, Any]]: ...
    def categorize_gtd_level(
        self, task_content: str, temperature: float = 0.2, max_output_tokens: int = 256
    ) -> Optional[dict]: ...
